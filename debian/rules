#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# Use v4 compatability mode, so ldconfig gets added to maint scripts.
export DH_COMPAT=4

# Normally nexenta-on-source
PACKAGE=$(shell dh_listpackages)

# Location of closed patches
# You are expected to make a symlink for this when you
# create a new workspace, i.e. patches -> ../nxp3xxx/closed
PATCHDIR=$(CURDIR)/patches

# Location where ON work space is found
export GATEROOT=$(CURDIR)

CLOSEDBIN_NAME=on-closed-bins-nd.i386.tar.bz2 
CLOSEDBIN_URL=http://dlc.sun.com/osol/on/downloads/b134/$(CLOSEDBIN_NAME)

CRYPTO_DIR=on-crypto-nd.i386.tar.bz2
CRYPTO_URL=http://dlc.sun.com/osol/on/downloads/b134/$(CRYPTO_DIR)

OS_REL := $(shell cat debian/packages/RELEASE|egrep "^OS_REL="|sed -e 's/^OS_REL=\(.*\)/\1/')
BUILD  := $(shell cat debian/packages/RELEASE|egrep "^BUILD="|sed -e 's/^BUILD=\(.*\)/\1/')
CORE_BUILD_REVISION=$(OS_REL).$(BUILD)

# Location where built packages will be uploaded..
APTDIR=$(CURDIR)/apt

# Location where Debian packages will be produced..
PKGDIR=$(CURDIR)/packages

patch: patch-stamp
patch-stamp:
	dh_testdir
	@if [ ! -d $(PATCHDIR)/. ]; then \
		echo "You need the closed patches"; \
		exit 1; \
	fi
	@for p in $(shell cat debian/series); \
	do \
		patch -N -p1 < $(PATCHDIR)/$$p; \
	done
	touch $@

setup-closed: setup-closed-stamp
setup-closed-stamp:
	dh_testdir
	rm -rf /var/tmp/$(CLOSEDBIN_NAME)
	wget -c -O /var/tmp/$(CLOSEDBIN_NAME) $(CLOSEDBIN_URL)
	rm -rf $(GATEROOT)/closed
	cd $(GATEROOT) && tar xjf /var/tmp/$(CLOSEDBIN_NAME)
	cd $(GATEROOT)/closed && ln -s root_i386-nd root_i386
	cd $(GATEROOT) && wget $(CRYPTO_URL)
	cp debian/eventlog.dll $(GATEROOT)/usr/src/cmd/smbsrv/smbd
	touch $@

build-on: patch setup-closed build-on-stamp
build-on-stamp:
	dh_testdir
	env - GATEROOT=$(GATEROOT) \
	  /opt/onbld/bin/nightly debian/ncp3-env.sh
	touch $@

# helpful rule for when your ON build fails...
rebuild-on: patch setup-closed
	env - GATEROOT=$(GATEROOT) \
	  /opt/onbld/bin/nightly -i debian/ncp3-env.sh

build-packages: build-on build-packages-stamp
build-packages-stamp:
	rm -rf $(PKGDIR)
	cp -ar debian/packages $(PKGDIR)
	cd $(PKGDIR) && ./update_rev.sh
	cd $(PKGDIR) && ./build_pkgs.sh
	touch $@

upload-packages: build-packages upload-packages-stamp
upload-packages-stamp:
	rm -rf $(APTDIR)
	debian/mkrepo $(APTDIR) $(APTDIR)/upload
	cp $(PKGDIR)/*.{deb,changes} $(APTDIR)/incoming/hardy-unstable
	$(APTDIR)/upload
	@echo -e "\n\n \
	Packages uploaded into local APT repository $(APTDIR) \n \
	Local APT preconfigured. Development upgrades are ready now.\n\n \
	Run the following commands to upgrade: \n \
		\"apt-clone dist-upgrade\"" >$(PKGDIR)/Upgrade-instructions

	@echo "Upgrade instructions are available here::$(PKGDIR)/Upgrade-instructions"
	touch $@

build: build-on build-packages upload-packages build-stamp
build-stamp:
	dh_testdir
	echo 'sunw:Version=$(CORE_BUILD_REVISION)' >> debian/$(PACKAGE).substvars
	touch $@

# This target needs the patches to be still applied.
# If patch-stamp is not there, do nothing.
clobber_on:
	if test -f patch-stamp ; then \
		/opt/onbld/bin/bldenv debian/ncp3-env.sh \
		  'cd usr/src ; dmake -k clobber' </dev/null ;\
	fi

rm_log_proto:
	rm -rf log
	rm -rf proto

unpatch: 
	@if [ ! -d $(PATCHDIR)/. ]; then \
		echo "You need the closed patches"; \
		exit 1; \
	fi
	@if [ -f patch-stamp ]; then \
		for p in $(shell /usr/sun/bin/rev -l debian/series); \
		do \
			patch -N -p1 -R < $(PATCHDIR)/$$p; \
		done; \
		rm -f patch-stamp; \
	fi

clean: clobber_on rm_log_proto unpatch
	dh_testdir
	dh_clean -d
	rm -f build-on-stamp build-stamp upload-packages-stamp build-packages-stamp debian/files


binary-indep: build

binary-arch: build
	dh_testdir
	dh_clean -k -d
	dh_installdirs
	dh_installdocs
	dh_installchangelogs
	dh_installdirs  usr/src/$(PACKAGE) usr/src/$(PACKAGE)/debian usr/src/$(PACKAGE)/patches
	#XXX cp -ar .hg debian/$(PACKAGE)/usr/src/$(PACKAGE)
	#XXX cd debian/$(PACKAGE)/usr/src/$(PACKAGE) && hg up -C
	dh_compress
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary
