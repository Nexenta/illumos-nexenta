#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# NAME  
#       link_reset_port.exp
#
# DESCRIPTION
#       The Expect script will send commands to the Qlogic  
#       switch to reset a port.
#
############################################################################
# This expect script is modified from the following.
# This Expect script was generated by autoexpect on Fri Dec 24 13:24:25 2004
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.
############################################################################

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

###########################################################################
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
############################################################################


set timeout -1
set switch_ip [lindex ${argv} 0]
set switch_adm [lindex ${argv} 1]
set switch_pass [lindex ${argv} 2]
set port_num [lindex ${argv} 3]
spawn telnet $switch_ip
expect {
  "Escape*" { exp_continue }
  " login: " {
      send -- "$switch_adm\r"
      exp_continue
  }
  "Password: " {
      send -- "$switch_pass\r"
      exp_continue }
   "Session rejected" {
       exec sleep 8
       spawn telnet $switch_ip
       expect {
          "Escape*" { exp_continue }
          " login: " {
               send -- "$switch_adm\r"
               exp_continue
               }
          "Password: " {
               send -- "$switch_pass\r"
               exp_continue
               }
           "Session rejected" {
               exec sleep 10
                spawn telnet $switch_ip
                expect {
                         "Escape*" { exp_continue }
                         " login: " {
                                send -- "$switch_adm\r"
                                exp_continue
                                        }
                        "Password: " {
                                send -- "$switch_pass\r"
                                 exp_continue
                                        }
                        "*#> " {
                                send -- "date\r" }
                                }
                        " Session rejected" {
                                send_user -- "attempted 3 times for login, fail "
                                send -- "exit\r"
                                exit 1 }
                }
          "*#> " {
               send -- "date\r" }
               }
     }
    "*#> " {
         send -- "date\r" }
     

}

send -- "date\r"
expect " #> ";
send -- "admin start\r"
expect {
   " (admin) #> " {
        send -- "reset port $port_num\r"
	send -- "y\r"
        }
  " Switch is already " {
        exec sleep 10
        send -- "admin start\r"
        expect {
                " (admin) #> " {
                        send -- "reset port $port_num\r"
			send -- "y\r" }
                " Switch is already " {
                        exec sleep 20
                        send -- "admin start\r"
                        expect {
                                " (admin) #> " {
                                        send -- "reset port $port_num\r"
					send -- "y\r" }
                                " Switch is already " {
                                        send -- "exit\r"
                                        send_user --  "attempted 3 times for admin mode, fail"
                                        exit 1 }
                        }
                }
        }
    }
}

expect " (admin) #> ";
send -- "admin end\r"
expect " #> ";
send -- "exit\r"
expect eof

